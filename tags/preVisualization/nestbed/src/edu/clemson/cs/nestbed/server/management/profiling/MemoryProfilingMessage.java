/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'MemoryProfilingMessage'
 * message type.
 */

package edu.clemson.cs.nestbed.server.management.profiling;

public class MemoryProfilingMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 11;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 7;

    /** Create a new MemoryProfilingMessage of size 11. */
    public MemoryProfilingMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new MemoryProfilingMessage of the given data_length. */
    public MemoryProfilingMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MemoryProfilingMessage with the given data_length
     * and base offset.
     */
    public MemoryProfilingMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MemoryProfilingMessage using the given byte array
     * as backing store.
     */
    public MemoryProfilingMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MemoryProfilingMessage using the given byte array
     * as backing store, with the given base offset.
     */
    public MemoryProfilingMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MemoryProfilingMessage using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public MemoryProfilingMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MemoryProfilingMessage embedded in the given message
     * at the given base offset.
     */
    public MemoryProfilingMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new MemoryProfilingMessage embedded in the given message
     * at the given base offset and length.
     */
    public MemoryProfilingMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <MemoryProfilingMessage> \n";
      try {
        s += "  [address=0x"+Long.toHexString(get_address())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [value=0x"+Long.toHexString(get_value())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [size=0x"+Long.toHexString(get_size())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [offset=0x"+Long.toHexString(get_offset())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [read=0x"+Long.toHexString(get_read())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: address
    //   Field type: long, signed
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'address' is signed (true).
     */
    public static boolean isSigned_address() {
        return true;
    }

    /**
     * Return whether the field 'address' is an array (false).
     */
    public static boolean isArray_address() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'address'
     */
    public static int offset_address() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'address'
     */
    public static int offsetBits_address() {
        return 0;
    }

    /**
     * Return the value (as a long) of the field 'address'
     */
    public long get_address() {
        return (long)getUIntBEElement(offsetBits_address(), 32);
    }

    /**
     * Set the value of the field 'address'
     */
    public void set_address(long value) {
        setUIntBEElement(offsetBits_address(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'address'
     */
    public static int size_address() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'address'
     */
    public static int sizeBits_address() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: value
    //   Field type: long, signed
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'value' is signed (true).
     */
    public static boolean isSigned_value() {
        return true;
    }

    /**
     * Return whether the field 'value' is an array (false).
     */
    public static boolean isArray_value() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'value'
     */
    public static int offset_value() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'value'
     */
    public static int offsetBits_value() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'value'
     */
    public long get_value() {
        return (long)getUIntBEElement(offsetBits_value(), 32);
    }

    /**
     * Set the value of the field 'value'
     */
    public void set_value(long value) {
        setUIntBEElement(offsetBits_value(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'value'
     */
    public static int size_value() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'value'
     */
    public static int sizeBits_value() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: size
    //   Field type: short, signed
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'size' is signed (true).
     */
    public static boolean isSigned_size() {
        return true;
    }

    /**
     * Return whether the field 'size' is an array (false).
     */
    public static boolean isArray_size() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'size'
     */
    public static int offset_size() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'size'
     */
    public static int offsetBits_size() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'size'
     */
    public short get_size() {
        return (short)getUIntBEElement(offsetBits_size(), 8);
    }

    /**
     * Set the value of the field 'size'
     */
    public void set_size(short value) {
        setUIntBEElement(offsetBits_size(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'size'
     */
    public static int size_size() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'size'
     */
    public static int sizeBits_size() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: offset
    //   Field type: short, signed
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'offset' is signed (true).
     */
    public static boolean isSigned_offset() {
        return true;
    }

    /**
     * Return whether the field 'offset' is an array (false).
     */
    public static boolean isArray_offset() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'offset'
     */
    public static int offset_offset() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'offset'
     */
    public static int offsetBits_offset() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'offset'
     */
    public short get_offset() {
        return (short)getUIntBEElement(offsetBits_offset(), 8);
    }

    /**
     * Set the value of the field 'offset'
     */
    public void set_offset(short value) {
        setUIntBEElement(offsetBits_offset(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'offset'
     */
    public static int size_offset() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'offset'
     */
    public static int sizeBits_offset() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: read
    //   Field type: byte, signed
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'read' is signed (true).
     */
    public static boolean isSigned_read() {
        return true;
    }

    /**
     * Return whether the field 'read' is an array (false).
     */
    public static boolean isArray_read() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'read'
     */
    public static int offset_read() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'read'
     */
    public static int offsetBits_read() {
        return 80;
    }

    /**
     * Return the value (as a byte) of the field 'read'
     */
    public byte get_read() {
        return (byte)getSIntBEElement(offsetBits_read(), 8);
    }

    /**
     * Set the value of the field 'read'
     */
    public void set_read(byte value) {
        setSIntBEElement(offsetBits_read(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'read'
     */
    public static int size_read() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'read'
     */
    public static int sizeBits_read() {
        return 8;
    }

}
