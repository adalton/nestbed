/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TraceEntry'
 * message type.
 */

public class TraceEntry extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 4;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 28;

    /** Create a new TraceEntry of size 4. */
    public TraceEntry() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TraceEntry of the given data_length. */
    public TraceEntry(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TraceEntry with the given data_length
     * and base offset.
     */
    public TraceEntry(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TraceEntry using the given byte array
     * as backing store.
     */
    public TraceEntry(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TraceEntry using the given byte array
     * as backing store, with the given base offset.
     */
    public TraceEntry(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TraceEntry using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TraceEntry(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TraceEntry embedded in the given message
     * at the given base offset.
     */
    public TraceEntry(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TraceEntry embedded in the given message
     * at the given base offset and length.
     */
    public TraceEntry(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TraceEntry> \n";
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [u.callTrace.moduleId=0x"+Long.toHexString(get_u_callTrace_moduleId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [u.callTrace.functionId=0x"+Long.toHexString(get_u_callTrace_functionId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [u.radioTrace.address=0x"+Long.toHexString(get_u_radioTrace_address())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [u.radioTrace.magic=0x"+Long.toHexString(get_u_radioTrace_magic())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: short
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (false).
     */
    public static boolean isSigned_type() {
        return false;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'type'
     */
    public short get_type() {
        return (short)getUIntBEElement(offsetBits_type(), 8);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(short value) {
        setUIntBEElement(offsetBits_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: u.callTrace.moduleId
    //   Field type: short
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'u.callTrace.moduleId' is signed (false).
     */
    public static boolean isSigned_u_callTrace_moduleId() {
        return false;
    }

    /**
     * Return whether the field 'u.callTrace.moduleId' is an array (false).
     */
    public static boolean isArray_u_callTrace_moduleId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'u.callTrace.moduleId'
     */
    public static int offset_u_callTrace_moduleId() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'u.callTrace.moduleId'
     */
    public static int offsetBits_u_callTrace_moduleId() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'u.callTrace.moduleId'
     */
    public short get_u_callTrace_moduleId() {
        return (short)getUIntBEElement(offsetBits_u_callTrace_moduleId(), 8);
    }

    /**
     * Set the value of the field 'u.callTrace.moduleId'
     */
    public void set_u_callTrace_moduleId(short value) {
        setUIntBEElement(offsetBits_u_callTrace_moduleId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'u.callTrace.moduleId'
     */
    public static int size_u_callTrace_moduleId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'u.callTrace.moduleId'
     */
    public static int sizeBits_u_callTrace_moduleId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: u.callTrace.functionId
    //   Field type: short
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'u.callTrace.functionId' is signed (false).
     */
    public static boolean isSigned_u_callTrace_functionId() {
        return false;
    }

    /**
     * Return whether the field 'u.callTrace.functionId' is an array (false).
     */
    public static boolean isArray_u_callTrace_functionId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'u.callTrace.functionId'
     */
    public static int offset_u_callTrace_functionId() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'u.callTrace.functionId'
     */
    public static int offsetBits_u_callTrace_functionId() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'u.callTrace.functionId'
     */
    public short get_u_callTrace_functionId() {
        return (short)getUIntBEElement(offsetBits_u_callTrace_functionId(), 8);
    }

    /**
     * Set the value of the field 'u.callTrace.functionId'
     */
    public void set_u_callTrace_functionId(short value) {
        setUIntBEElement(offsetBits_u_callTrace_functionId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'u.callTrace.functionId'
     */
    public static int size_u_callTrace_functionId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'u.callTrace.functionId'
     */
    public static int sizeBits_u_callTrace_functionId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: u.radioTrace.address
    //   Field type: short
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'u.radioTrace.address' is signed (false).
     */
    public static boolean isSigned_u_radioTrace_address() {
        return false;
    }

    /**
     * Return whether the field 'u.radioTrace.address' is an array (false).
     */
    public static boolean isArray_u_radioTrace_address() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'u.radioTrace.address'
     */
    public static int offset_u_radioTrace_address() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'u.radioTrace.address'
     */
    public static int offsetBits_u_radioTrace_address() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'u.radioTrace.address'
     */
    public short get_u_radioTrace_address() {
        return (short)getUIntBEElement(offsetBits_u_radioTrace_address(), 8);
    }

    /**
     * Set the value of the field 'u.radioTrace.address'
     */
    public void set_u_radioTrace_address(short value) {
        setUIntBEElement(offsetBits_u_radioTrace_address(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'u.radioTrace.address'
     */
    public static int size_u_radioTrace_address() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'u.radioTrace.address'
     */
    public static int sizeBits_u_radioTrace_address() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: u.radioTrace.magic
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'u.radioTrace.magic' is signed (false).
     */
    public static boolean isSigned_u_radioTrace_magic() {
        return false;
    }

    /**
     * Return whether the field 'u.radioTrace.magic' is an array (false).
     */
    public static boolean isArray_u_radioTrace_magic() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'u.radioTrace.magic'
     */
    public static int offset_u_radioTrace_magic() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'u.radioTrace.magic'
     */
    public static int offsetBits_u_radioTrace_magic() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'u.radioTrace.magic'
     */
    public int get_u_radioTrace_magic() {
        return (int)getUIntBEElement(offsetBits_u_radioTrace_magic(), 16);
    }

    /**
     * Set the value of the field 'u.radioTrace.magic'
     */
    public void set_u_radioTrace_magic(int value) {
        setUIntBEElement(offsetBits_u_radioTrace_magic(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'u.radioTrace.magic'
     */
    public static int size_u_radioTrace_magic() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'u.radioTrace.magic'
     */
    public static int sizeBits_u_radioTrace_magic() {
        return 16;
    }

}
